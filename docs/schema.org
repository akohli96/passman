
* DB Schema
  Database will be located in the ~/.passman/ folder

  #+BEGIN_SRC json
    {
        "_id": 1,
        "name": "encryped name (key=master password)",
        "password": "hashed password",
        "data": [
            {
                "_id": 1,
                "service": "encrypted name of service (key=master pw; cannot be duplicate)",
                "servicePassword": "encryped service password (key = master pw)",
                "serviceUrl": "encryped service url (key = master pw)",
                "serviceUserName": "encryped service username (key = master pw)"
            }
        ]
    }
  #+END_SRC

* Database API
** addUser
   Adds a new user document to the database.


   Parameters:
   1. name: the name of the new user
   2. pw: the master password for the new user


   Return:
   True if successful, False if not

** getAllServices
   Return a list of all services as a dictionary


   Parameters: none


   Return:
   The array of dictionaries, each representing a service

** checkIfServiceExists
   Checks for a duplicate name in the database


   Parameters:
   1. name: the name of the service to check


   Return:
   True if service exists, False if not

** addService
   Add a service to a user's document


   Parameters:
   1. name: the name of the new service
   2. pw: the password for the new service
   3. serviceUrl [optional]: the url of the service. Defaults to "" if not provided
   4. serviceUserName [optional]: the user name for the new service. Defaults to "" if not provided


   Return:
   True if successful, False if not

** removeService
   Remove a service from a user's document


   Parameters:
   1. name: the name of the service to remove


   Return:
   True if successful, False if not

** updateService
   Updates a service to a new set of data. Be sure to provide the entire fingerprint of the new data, not just what changed. This includes any url, username, etc. even if they have not been changed


   Parameters:
   1. oldName: the old name of the service 
   2. newName: the new name of the service
   3. pw: the new password for the service
   4. serviceUrl [optional]: the new url of the service. Defaults to "" if not provided - WILL OVERWRITE EXISTING URL TO "" IF NOT PROVIDED
   5. serviceUserName [optional]: the new user name for the service. Defaults to "" if not provided - WILL OVERWRITE EXISTING URL TO "" IF NOT PROVIDED



   Return:
   True if successful, False if not

** getServiceByName
   Returns a service of a given name

   Parameters: 
   1. name: the name of the service to retrieve

   Return:
   Dictionary for the service, or empty dictionary if not found



* Application API
** list
   Called from user menu or via:
   #+BEGIN_SRC
    passman list
   #+END_SRC
   - List services as:
     #+BEGIN_SRC
       1. Google | Sam
          https://www.google.com

       2. Yahoo | Sam
          https://www.yahoo.com

       3. Github | Sam
          https://www.github.com
     #+END_SRC
** add
   Add a new service to the database
   - Called from user menu or via
   #+BEGIN_SRC
    passman add
   #+END_SRC

   - Walk user through each of the following:
*** Name (required - no duplicates)
    - Name of the service
    - Must be input by user
    - Cannot match any existing names in db
*** Password (required)
    - Password for service.
    - Prompt for manual entry or Auto generation
**** Auto Generate (Default)
     - prompt for the following:
***** Length
      - Default: 30 characters
***** Caps - Yes | No | Either
      - Default: either
***** Lowercase - Yes | No | Either
      - Default: either
***** Integers - Yes | No | Either
      - Default: either
***** Special Chars - Yes | No | Either
      - Default: either
**** Manual entry
     - prompt for password
*** URL (not required)
    - URL for login page of service
*** User Name (not required)
    - User name or email associated with service
** remove
   Remove a service and all associated data from the database
   - Called via menu or command line
     - command line takes an optional service name as a parameter (see below)
     - if no service name is provided, user will be prompted for one
   #+BEGIN_SRC
    passman remove [service name]
   #+END_SRC
** edit
   Walk user through the same steps as "Add". Prompt user to edit each field, or press enter to keep the data the same

   - Called via menu or command line
     - command line takes an optional service name as a parameter (see below)
     - if no service name is provided, user will be prompted for one
   #+BEGIN_SRC
    passman edit [service name]
   #+END_SRC

** getname
   Copies user name for a service to clipboard for 30 seconds

   - Called via menu or command line
     - command line takes an optional service name as a parameter (see below)
     - if no service name is provided, user will be prompted for one
   #+BEGIN_SRC
    passman getname [service name]
   #+END_SRC
** getpass
   Copies user password for a service to clipboard for 30 seconds

   - Called via menu or command line
     - command line takes an optional service name as a parameter (see below)
     - if no service name is provided, user will be prompted for one
   #+BEGIN_SRC
    passman getpass [service name]
   #+END_SRC
** geturl 
   Copies service url to clipboard for 30 seconds

   - Called via menu or command line
     - command line takes an optional service name as a parameter (see below)
     - if no service name is provided, user will be prompted for one
   #+BEGIN_SRC
    passman geturl [service name]
   #+END_SRC
** open
   Opens the url for a service in the browser 

   - Called via menu or command line
     - command line takes an optional service name as a parameter (see below)
     - if no service name is provided, user will be prompted for one
   #+BEGIN_SRC
    passman open [service name]
   #+END_SRC

